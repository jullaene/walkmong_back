plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.5'
    id 'io.spring.dependency-management' version '1.1.6'
}

group = 'org.jullaene'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-websocket'
    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'com.mysql:mysql-connector-j'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    // jwt
    implementation "io.jsonwebtoken:jjwt-api:0.11.2"
    runtimeOnly "io.jsonwebtoken:jjwt-impl:0.11.2"
    runtimeOnly "io.jsonwebtoken:jjwt-jackson:0.11.2"

    // swagger
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.2.0'

    // Querydsl
    implementation "com.querydsl:querydsl-jpa:5.0.0:jakarta"
    annotationProcessor "com.querydsl:querydsl-apt:5.0.0:jakarta"

    annotationProcessor "jakarta.persistence:jakarta.persistence-api"

    // Redis
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'

    //smtp
    implementation 'org.springframework.boot:spring-boot-starter-mail'

    // s3
    implementation(enforcedPlatform("com.amazonaws:aws-java-sdk-bom:1.11.1000"))
    implementation("com.amazonaws:aws-java-sdk-s3")
    implementation("javax.xml.bind:jaxb-api:2.3.1")

}

tasks.named('test') {
    useJUnitPlatform()
}

def generatedSourcesDir = file("src/main/generated")
sourceSets.main.java.srcDir generatedSourcesDir

tasks.withType(JavaCompile) {
    options.annotationProcessorGeneratedSourcesDirectory = generatedSourcesDir
}